# @TEST-SERIALIZE: brokercomm
# @TEST-REQUIRES: grep -q ENABLE_BROKER:BOOL=true $BUILD/CMakeCache.txt

# @TEST-EXEC: btest-bg-run recv "bro -b ../common.bro ../recv.bro broker_port=$BROKER_PORT >recv.out"
# @TEST-EXEC: btest-bg-run send "bro -b ../common.bro ../send.bro broker_port=$BROKER_PORT >send.out"

# @TEST-EXEC: btest-bg-wait 20
# @TEST-EXEC: btest-diff recv/recv.out
# @TEST-EXEC: btest-diff recv/test.log
# @TEST-EXEC: btest-diff send/send.out
# @TEST-EXEC: btest-diff send/test.log

@TEST-START-FILE common.bro


global quit_receiver: event();
global quit_sender: event();


module Test;

export {
        redef enum Log::ID += { LOG };

	type Info: record {
		b: bool;
		i: int;
		e: Log::ID;
		c: count;
		p: port;
		sn: subnet;
		a: addr;
		d: double;
		t: time;
		iv: interval;
		s: string;
		sc: set[count];
		ss: set[string];
		se: set[string];
		vc: vector of count;
		ve: vector of string;
		f: function(i: count) : string;
	} &log;

}

event bro_init() &priority=5
        {
        Broker::enable();
        Log::create_stream(Test::LOG, [$columns=Test::Info]);
        }

@TEST-END-FILE

@TEST-START-FILE recv.bro

const broker_port: port &redef;
redef exit_only_after_terminate = T;

event bro_init()
        {
        Broker::subscribe_to_logs("bro/log/");
        Broker::subscribe_to_events("bro/event/");
        Broker::listen(broker_port, "127.0.0.1");
        }

event quit_receiver()
	{
	terminate();
	}

@TEST-END-FILE


@TEST-START-FILE send.bro

const broker_port: port &redef;
redef exit_only_after_terminate = T;

event bro_init()
        {
        Broker::enable_remote_logs(Test::LOG);
        Broker::publish_topic("bro/event/");
        Broker::connect("127.0.0.1", broker_port, 1secs);
        }

event quit_sender()
	{
	terminate();
	}

function foo(i : count) : string
	{
	if ( i > 0 )
		return "Foo";
	else
		return "Bar";
	}

event Broker::outgoing_connection_established(peer_address: string,
                                            peer_port: port,
                                            peer_name: string)
        {
        print "Broker::outgoing_connection_established", peer_address, peer_port;

	local empty_set: set[string];
	local empty_vector: vector of string;
	
	Log::write(Test::LOG, [
		$b=T,
		$i=-42,
		$e=Test::LOG,
		$c=21,
		$p=123/tcp,
		$sn=10.0.0.1/24,
		$a=1.2.3.4,
		$d=3.14,
		$t=network_time(),
		$iv=100secs,
		$s="hurz",
		$sc=set(1), # set(1,2,3,4),  # Output not stable for multi-element sets.
		$ss=set("AA"), # set("AA", "BB", "CC") # Output not stable for multi-element sets.
		$se=empty_set,
		$vc=vector(10, 20, 30),
		$ve=empty_vector,
		$f=foo
		]);

	local args = Broker::event_args(quit_receiver);
	Broker::send_event("bro/event/", args);
	schedule 1sec { quit_sender() };
        }

@TEST-END-FILE
